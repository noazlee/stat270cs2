---
title: "Workingdoccasetsuyd2"
format: html
editor: visual
---

```{r setup}
#| include: false
# Load necessary packages
library(tidyverse)
library(tidymodels)
library(dplyr)
library(ggformula)
library(ggplot2) 
library(GGally)
##install.packages("mosaic")
library(mosaic)
tidymodels_prefer(quiet = TRUE) 
```

```{r}
mnist100_tbl <- read_csv("https://aloy.github.io/stat270/data/digits26.csv", show_col_types = FALSE) |>
  mutate(digit=as.factor(digit)) |>
  slice_head(n=100)
dim(mnist100_tbl)

mnist_tbl <- read_csv("https://aloy.github.io/stat270/data/digits26.csv", 
                      show_col_types = FALSE) |> 
  mutate(digit=as.factor(digit)) |>
  filter(digit == c(2,6))

dim(mnist_tbl)
```

```{r}
plot_digit <- function(row) {
  digit_mat <- row |>
    select(-digit)|>
    as.numeric() |>
    matrix(nrow = 28)
  
  image(digit_mat[,28:1])
}
```

```{r}
pull(mnist100_tbl[1,], digit)
pull(mnist100_tbl[2,], digit)
```

```{r}
plot_digit(mnist100_tbl[8,])

plot_digit(mnist100_tbl[81,])
```
```{r}
## Tester Code from the assignment doc 
region1 <- read_csv("https://aloy.github.io/stat270/data/digits26.csv", col_names = FALSE, show_col_types = FALSE)
region1

region2 <- read_csv("https://aloy.github.io/stat270/data/region1.csv", col_names = FALSE, show_col_types = FALSE)

region2
```

```{r}
## Tester Code
plot_region <- function(mnist100_tbl) {
  digit_mat <- as.matrix(mnist100_tbl) * 128 # Convert tbl into matrix and assign gray=128

  image(t(digit_mat)[,28:1]) #Plot the image making sure is rotated
}

plot_region(region1)

```

```{r}
calc_prop <- function (region, row) {
  # Take row from mnist and transform into a "digit" matrix
  digit_mat <-  row |>
    as.numeric() |>
    matrix(nrow = 28) |>
    t()
  
  # Find positions of pixels from "region"
  pos <- (region==1)
  
  # Subset "digit" to the positions and count dark pixels (grey>20)
  dark <- digit_mat[pos] > 20 
  
  # Return proportion of dark pixels of "image" in "region"
  return(sum(dark) / sum(pos))
}
```

```{r}

calc_prop(region2, mnist100_tbl[1, 2:785])

calc_prop(region2, mnist100_tbl[5, 2:785])

calc_prop(region2, mnist100_tbl[13,2:785])

```

```{r}
(tmp_tbl <- mnist100_tbl|>
  rowwise()|>
  mutate(area = calc_prop(region1, c_across(V1:V784))) |>
  ungroup()|>
  select(digit,area))

```

```{r}
ggplot(tmp_tbl, aes(x=digit,y=area))+
  geom_boxplot()

```
Next steps:
Define regions to help define each digit. 

```{r}
region_bottom_right <- matrix(0, nrow = 28, ncol = 28)

# Set the bottom right quarter to 1s
region_bottom_right[15:28, 15:28] <- 1

# Convert to a tibble for plotting if needed
region_bottom_right_tbl <- as_tibble(region_bottom_right)

plot_region(region_bottom_right_tbl)
```

```{r}
region_middle_left <- matrix(0, nrow = 28, ncol = 28)
region_middle_left[10:20, 1:14] <- 1
region_middle_left_tbl <- as_tibble(region_middle_left)

plot_region(region_middle_left_tbl)


```
, 10:10, 10:19
```{r}
## The only region feature we are adding into our model
special_section <- matrix(0, nrow = 28, ncol = 28)
special_section[9:16, 6:13] <- 1
special_section_tbl <- as_tibble(special_section)

plot_region(special_section)
```

```{r}
region_center <- matrix(0, nrow = 28, ncol = 28)
region_center[10:19, 10:19] <- 1
region_center_tbl <- as_tibble(region_center)

plot_region(region_center_tbl)

```
```{r}
calc_prop <- function(region, row) {
  digit_mat <- matrix(as.numeric(row), nrow = 28, byrow = TRUE)
  pos <- (region == 1)
  dark_pixels <- digit_mat[pos] > 20  # Threshold for darkness
  prop_dark <- sum(dark_pixels) / sum(pos)
  return(prop_dark)
}

```

```{r}
mnist_features <- mnist100_tbl |>
  mutate(
    prop_bottom_right = apply(select(cur_data(), V1:V784), 1, function(row) calc_prop(region_bottom_right, row))
  )

```


```{r}
mnist_features <- mnist100_tbl |>
  mutate(
    prop_bottom_right = apply(select(cur_data(), V1:V784), 1, function(row) calc_prop(region_bottom_right, row)),
    prop_middle_left = apply(select(cur_data(), V1:V784), 1, function(row) calc_prop(region_middle_left, row)),
    prop_center = apply(select(cur_data(), V1:V784), 1, function(row) calc_prop(region_center, row))
  )

mnist_features

mnist100_tbl
```

```{r}
# Bottom Right Region
ggplot(mnist_features, aes(x = digit, y = prop_bottom_right)) +
  geom_boxplot() +
  labs(title = "Proportion of Dark Pixels in Bottom Right Region by Digit")

# Middle Left Region
ggplot(mnist_features, aes(x = digit, y = prop_middle_left)) +
  geom_boxplot() +
  labs(title = "Proportion of Dark Pixels in Middle Left Region by Digit")

# Center Region
ggplot(mnist_features, aes(x = digit, y = prop_center)) +
  geom_boxplot() +
  labs(title = "Proportion of Dark Pixels in Center Region by Digit")

```
Try some more region splits
```{r}
##top and bottom 
region_top <- matrix(0, nrow = 28, ncol = 28)
region_top[1:14, ] <- 1 
region_top_tbl <- as_tibble(region_top)

region_bottom <- matrix(0, nrow = 28, ncol = 28)
region_bottom[15:28, ] <- 1 
region_bottom_tbl <- as_tibble(region_bottom)
```

```{r}
mnist_features2 <- mnist100_tbl |>
  mutate(
    prop_top = apply(select(cur_data(), V1:V784), 1, function(row) calc_prop(region_top, row)),
    prop_bottom = apply(select(cur_data(), V1:V784), 1, function(row) calc_prop(region_bottom, row))
  )

```

```{r}
## Top region
ggplot(mnist_features2, aes(x = digit, y = prop_top)) +
  geom_boxplot() +
  labs(title = "Proportion of Dark Pixels in Top Region by Digit")

# bottom Region
ggplot(mnist_features2, aes(x = digit, y = prop_bottom)) +
  geom_boxplot() +
  labs(title = "Proportion of Dark Pixels in Bottom Region by Digit")
```
```{r}

calc_prop(mnist100_tbl[1,1000])

calc_prop(mnist100_tbl[2,1000])


##what is the threshold for a dark pixel? 

threshold <- 50 #assigned 50 for now

pixel_matrix <- as.matrix(select(mnist100_tbl, -digit))

dark_pixels <- pixel_matrix > threshold

num_dark_pixels_total <- rowSums(dark_pixels)

num_dark_pixels_total

#prop of dark pixels
total_pixels <- ncol(pixel_matrix)

prop_dark_pixels_total <- num_dark_pixels_total / total_pixels 

prop_dark_pixels_total


mnist_counts <- mnist100_tbl |>
  mutate(num_dark_pixels_total = num_dark_pixels_total)

head(mnist_counts, 10)

##summary(mnist_counts) ## hard to read, i.e don't know how to read 

mnist_counts |> ## Idea from Chat 
  group_by(digit) |>
  summarise(
    count = n(),
    mean_dark_pixels = mean(num_dark_pixels_total),
    sd_dark_pixels = sd(num_dark_pixels_total),
    min_dark_pixels = min(num_dark_pixels_total),
    max_dark_pixels = max(num_dark_pixels_total)
  )

ggplot(mnist_counts, aes(x = digit, y = num_dark_pixels_total)) +
  geom_boxplot() +
  labs(
    title = "Total Number of Dark Pixels by Digit",
    x = "Digit",
    y = "Number of Dark Pixels"
  )

ggplot(mnist_counts, aes(x = digit, y = prop_dark_pixels_total)) +
  geom_boxplot() +
  labs(
    title = "Total Prop of Dark Pixels by Digit",
    x = "Digit",
    y = "Prop of Dark Pixels"
  )

figit

anovaTest <- aov(prop_dark_pixels_total ~ digit, data = mnist_counts)

summary(anovaTest)

```
The p value of digits is 0.00303, which is pretty significant. We decided to include this into our model as a feature. 
```{r}
data_2_6 <- mnist_features |>
  filter(digit %in% c('2', '6')) |>
  mutate(digit = factor(digit))
```

```{r}
##split data into training and validation and testing set 
set.seed(123)
train_index <- createDataPartition(data_2_6$digit, p = 0.8, list = FALSE)
train_data <- data_2_6[train_index, ]
test_data <- data_2_6[-train_index, ]
```